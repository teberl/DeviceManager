@page "/device-overview"

@using DeviceManager.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DeviceStoreContext> DbFactory
@implements IDisposable

<h1>Device Overview</h1>

@if (deviceEntities == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="table-responsive">
        <table class="table table-hover table-sm">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Failsafe</th>
                    <th>DeviceTypeId</th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var entity in deviceEntities)
                {
                    <tr>
                        <td class="align-middle">@entity.Name</td>
                        <td class="align-middle">@entity.Failsafe</td>
                        <td class="align-middle">@entity.DeviceTypeId</td>
                        <td>
                            <a type="button" class="btn btn-primary" href="devices/@entity.Id">
                                Details
                            </a>
                        </td>
                        <td>
                            @* @TODO Implement delete *@
                            <button type="button" class="btn btn-danger" disabled="@isDisabled" @onclick="() => DeleteDevice(entity.Id)">
                                Delete
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    private List<DeviceEntity> deviceEntities;
    private DeviceStoreContext dbContext;
    private bool isDisabled;

    private int? isDeletingEntityId;

    protected override async Task OnInitializedAsync()
    {
        isDisabled = true;

        try
        {
            dbContext = DbFactory.CreateDbContext();
            deviceEntities = dbContext.Devices.ToList();
        }
        finally
        {
            isDisabled = false;
        }

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        dbContext.Dispose();
    }

    async Task DeleteDevice(int id)
    {
        Console.WriteLine($"Delete Device with id: \"{id}\" is not implemented yet.");
        isDisabled = true;
        isDeletingEntityId = id;

        var device = await dbContext.Devices.FirstAsync(entity => entity.Id == id);

        if (device != null)
        {
            dbContext.Devices.Remove(device);
            await dbContext.SaveChangesAsync();
            deviceEntities = await dbContext.Devices.ToListAsync();
        }

        isDisabled = false;
        StateHasChanged();
    }
}
