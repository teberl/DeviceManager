@page "/"

@using DeviceManager.Data
@using System.Text;
@using System.Text.Json;
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<DeviceStoreContext> DbFactory

<h1>DeviceManager v0.1</h1>

<p>
    DeviceManager is a Demo Application which allows you to upload and display your device details.<br>
    An example file for upload can be found <a href="assets/data.json" target="_blank" rel="noopener noreferrer">here</a>.
</p>

<div class="d-flex flex-column align-items-center my-4">
    <InputFile OnChange="@OnInputFileChange" accept="application/json" />
    (Please only upload json file with a max size of 500KB)
</div>

@if (status != null && busy == false) {
    <div class="alert alert-info" role="alert">
        @status
    </div>
}

@code {
    private bool busy = false;
    private string status;

    private async Task OnInputFileChange(InputFileChangeEventArgs eventArgs)
    {
        busy = true;
        var file = eventArgs.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        
        var fileData = DeserializeResponse(buffer);

        if (fileData.Devices.Length > 0)
        {
            await SaveDevices(fileData.Devices);
        }

    }

    private async Task SaveDevices(Device[] devices)
    {
        try
        {
            using var dbContext = DbFactory.CreateDbContext();
            await dbContext.Devices.AddRangeAsync(devices);
            await dbContext.SaveChangesAsync();
        }
        finally
        {
            status = $"{devices.Length} devices uploaded";
            busy = false;
            ClearUpStatusMessage();
        }
    }

    private async Task ClearUpStatusMessage()
    {
        await Task.Delay(3000);
        status = null;
        StateHasChanged();
    }

    private static FileData DeserializeResponse(byte[] buffer)
    {
        var bytesAsString = Encoding.UTF8.GetString(buffer);
        return JsonSerializer.Deserialize<FileData>(bytesAsString);
    }
}